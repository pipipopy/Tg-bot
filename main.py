import asyncio
import random
import time
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
    CallbackQueryHandler,
    ConversationHandler
)
from tinkoff.invest import AsyncClient, InstrumentStatus, InstrumentIdType
from tinkoff.invest.utils import quotation_to_decimal
from datetime import datetime, timezone
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TINKOFF_TOKEN = "t.qZQAlxmuWxV7j6MglXaFl4Pfyd0s9MENH2ZEYq1azGDk_uSYr9RYHtqs-rhz6v8F-1ZPqwRP_2oLulHAXgX80g"
TELEGRAM_TOKEN = "8001683378:AAFLoT-ENDhf5oT8paDU17lH0srlfBZN0Ec"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–µ—à –æ–±–ª–∏–≥–∞—Ü–∏–π
bond_cache = []
bond_details_cache = {}  # –ö–µ—à –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –æ–±–ª–∏–≥–∞—Ü–∏–π
last_cache_update = None

# –ú–∞–ø–ø–∏–Ω–≥ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è —Å–µ–∫—Ç–æ—Ä–æ–≤
SECTOR_KEYWORDS = {
    "–§–∏–Ω–∞–Ω—Å—ã": ["—Ñ–∏–Ω–∞–Ω—Å", "–±–∞–Ω–∫", "—Å—Ç—Ä–∞—Ö", "–∏–Ω–≤–µ—Å—Ç", "financial"],
    "–ù–µ—Ñ—Ç—å –∏ –≥–∞–∑": ["–Ω–µ—Ñ—Ç", "–≥–∞–∑", "–Ω–µ—Ñ—Ç–µ", "–Ω–µ—Ñ—Ç–µ–≥–∞–∑", "oil", "gas"],
    "–¢–µ–ª–µ–∫–º—É–Ω–∏–∫–∞—Ü–∏–∏": ["—Ç–µ–ª–µ–∫–æ–º", "—Å–≤—è–∑—å", "—Ç–µ–ª–µ", "–∫–æ–º–º—É–Ω–∏–∫–∞—Ü", "telecom"],
    "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç": ["—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–∞–≤–∏–∞", "–∂–µ–ª–µ–∑–Ω", "–∞–≤—Ç–æ", "transport"],
    "–ú–µ—Ç–∞–ª–ª—É—Ä–≥–∏—è": ["–º–µ—Ç–∞–ª–ª", "—Å—Ç–∞–ª—å", "–º–µ—Ç–∞–ª–ª—É—Ä–≥", "–º–µ—Ç–∞–ª", "metallurgy"],
    "–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞": ["—ç–Ω–µ—Ä–≥", "—ç–ª–µ–∫—Ç—Ä–æ", "—ç–ª–µ–∫—Ç—Ä–∏—á", "—ç–Ω–µ—Ä–≥–µ—Ç–∏–∫", "electric"],
    "–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã": ["–ø–æ—Ç—Ä–µ–±", "—Ç–æ–≤–∞—Ä", "—Ä–æ–∑–Ω–∏—Ü", "consumer", "retail"],
    "–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å": ["–Ω–µ–¥–≤–∏–∂", "—Å—Ç—Ä–æ–∏—Ç", "–¥–µ–≤–µ–ª–æ–ø", "real estate", "development"],
    "–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ": ["–≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤", "–≥–æ—Å", "government", "—Å—É–≤–µ—Ä–µ–Ω", "—Ñ–µ–¥–µ—Ä–∞–ª—å–Ω"],
    "–ú—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã–µ": ["–º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω", "–≥–æ—Ä–æ–¥—Å–∫", "–æ–±–ª–∞—Å—Ç–Ω", "municipal", "—Å—É–±—Ñ–µ–¥–µ—Ä–∞–ª—å–Ω"],
    "–î—Ä—É–≥–∏–µ": []  # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±–ª–∏–≥–∞—Ü–∏–∏
}

# –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ–∫—Ç–æ—Ä—ã —ç–∫–æ–Ω–æ–º–∏–∫–∏ (—É–±—Ä–∞–ª–∏ "–•–∏–º–∏—é")
SECTORS = [
    "–§–∏–Ω–∞–Ω—Å—ã", "–ù–µ—Ñ—Ç—å –∏ –≥–∞–∑", "–¢–µ–ª–µ–∫–º—É–Ω–∏–∫–∞—Ü–∏–∏", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", 
    "–ú–µ—Ç–∞–ª–ª—É—Ä–≥–∏—è", "–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞", "–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã",
    "–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å", "–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ", "–ú—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã–µ", "–î—Ä—É–≥–∏–µ"
]

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –ø–æ–∏—Å–∫–∞
SECTOR_SELECTION, MIN_RATE, LIMIT = range(3)

async def get_bond_details(figi: str):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
    if figi in bond_details_cache:
        cached_data, timestamp = bond_details_cache[figi]
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –∫–µ—à–µ –Ω–µ —Å—Ç–∞—Ä—à–µ 5 –º–∏–Ω—É—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
        if time.time() - timestamp < 300:
            return cached_data
    
    async with AsyncClient(TINKOFF_TOKEN) as client:
        try:
            response = await client.instruments.bond_by(id_type=InstrumentIdType.INSTRUMENT_ID_TYPE_FIGI, id=figi)
            bond = response.instrument
            
            nominal = float(quotation_to_decimal(bond.nominal))
            coupon_quantity_per_year = bond.coupon_quantity_per_year
            
            coupon_rate_percent = None
            coupon_payment = None
            
            if hasattr(bond, "coupon_percent") and bond.coupon_percent is not None:
                coupon_rate_percent = bond.coupon_percent
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º –∫—É–ø–æ–Ω–æ–≤
                await asyncio.sleep(0.1)
                coupons_response = await client.instruments.get_bond_coupons(figi=figi)
                if coupons_response.events:
                    now = datetime.now(timezone.utc)
                    for coupon in coupons_response.events:
                        coupon_date = coupon.coupon_date.replace(tzinfo=timezone.utc)
                        if coupon_date > now:
                            if hasattr(coupon, "pay_one_bond") and coupon.pay_one_bond:
                                coupon_payment = float(quotation_to_decimal(coupon.pay_one_bond))
                            break
            
            if coupon_rate_percent and not coupon_payment and coupon_quantity_per_year > 0:
                coupon_payment = (nominal * coupon_rate_percent / 100) / coupon_quantity_per_year
                
            if coupon_payment and not coupon_rate_percent and nominal > 0 and coupon_quantity_per_year > 0:
                coupon_rate_percent = (coupon_payment * coupon_quantity_per_year / nominal) * 100
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–Ω–µ–π –¥–æ –ø–æ–≥–∞—à–µ–Ω–∏—è
            days_to_maturity = 0
            if bond.maturity_date:
                maturity_date = bond.maturity_date.replace(tzinfo=timezone.utc)
                days_to_maturity = (maturity_date - datetime.now(timezone.utc)).days
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ–∫—Ç–æ—Ä –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            sector_name = "–î—Ä—É–≥–∏–µ"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if hasattr(bond, 'sector') and bond.sector:
                bond_sector = bond.sector.lower()
                
                # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–µ–∫—Ç–æ—Ä –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
                for sector, keywords in SECTOR_KEYWORDS.items():
                    if sector == "–î—Ä—É–≥–∏–µ":
                        continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º "–î—Ä—É–≥–∏–µ" –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ
                        
                    if any(keyword in bond_sector for keyword in keywords):
                        sector_name = sector
                        break
            
            result = {
                "name": bond.name,
                "ticker": bond.ticker,
                "figi": bond.figi,
                "currency": bond.nominal.currency,
                "nominal": nominal,
                "coupon_rate_percent": coupon_rate_percent,
                "coupon_payment": coupon_payment,
                "coupon_quantity_per_year": coupon_quantity_per_year,
                "maturity_date": bond.maturity_date.strftime("%d.%m.%Y") if bond.maturity_date else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                "days_to_maturity": days_to_maturity,
                "sector": sector_name
            }

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
            bond_details_cache[figi] = (result, time.time())
            return result
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ–± –æ–±–ª–∏–≥–∞—Ü–∏–∏ {figi}: {str(e)}", exc_info=True)
            return None

async def get_all_bonds():
    global bond_cache, last_cache_update
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à, –µ—Å–ª–∏ –æ–Ω –∞–∫—Ç—É–∞–ª–µ–Ω (–æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑ –≤ 10 –º–∏–Ω—É—Ç)
    if bond_cache and last_cache_update and (time.time() - last_cache_update) < 600:
        return bond_cache
    
    async with AsyncClient(TINKOFF_TOKEN) as client:
        try:
            response = await client.instruments.bonds(
                instrument_status=InstrumentStatus.INSTRUMENT_STATUS_BASE
            )
            if not response.instruments:
                return []
            
            filtered_bonds = []
            for bond in response.instruments:
                if (bond.currency == 'rub' and 
                    not bond.for_qual_investor_flag and 
                    not bond.floating_coupon_flag and 
                    bond.buy_available_flag and 
                    bond.sell_available_flag):
                    filtered_bonds.append(bond)
            
            bond_cache = filtered_bonds
            last_cache_update = time.time()
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω –∫–µ—à –æ–±–ª–∏–≥–∞—Ü–∏–π. –ù–∞–π–¥–µ–Ω–æ {len(bond_cache)} –æ–±–ª–∏–≥–∞—Ü–∏–π")
            return bond_cache
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±–ª–∏–≥–∞—Ü–∏–π: {str(e)}", exc_info=True)
            return bond_cache if bond_cache else []

async def find_and_send_bonds(message, min_rate, sector=None, limit=5):
    all_bonds = await get_all_bonds()
    if not all_bonds:
        await message.reply_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –æ–±–ª–∏–≥–∞—Ü–∏–π.")
        return

    # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –æ–±–ª–∏–≥–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
    shuffled_bonds = random.sample(all_bonds, len(all_bonds))
    found_count = 0
    processed_count = 0

    # –°–æ–æ–±—â–∞–µ–º –æ –Ω–∞—á–∞–ª–µ –ø–æ–∏—Å–∫–∞
    await message.reply_text(f"üîç –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –ø–æ {len(shuffled_bonds)} –æ–±–ª–∏–≥–∞—Ü–∏—è–º...")

    for bond in shuffled_bonds:
        if found_count >= limit:
            break
            
        try:
            details = await get_bond_details(bond.figi)
            processed_count += 1
            
            if not details:
                continue
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–≤–∫—É
            coupon_rate = details.get('coupon_rate_percent')
            if coupon_rate is None or coupon_rate < min_rate:
                continue
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ç–æ—Ä (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
            if sector:
                if details.get('sector') != sector:
                    continue
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é –æ–±–ª–∏–≥–∞—Ü–∏—é —Å—Ä–∞–∑—É
            found_count += 1
            await send_bond_details(message, details)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 20 –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ–±–ª–∏–≥–∞—Ü–∏–π
            if processed_count % 20 == 0:
                await message.reply_text(f"‚è≥ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {processed_count}/{len(shuffled_bonds)} –æ–±–ª–∏–≥–∞—Ü–∏–π...")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–ª–∏–≥–∞—Ü–∏–∏ {bond.figi}: {str(e)}")
            continue

    # –§–∏–Ω–∞–ª –ø–æ–∏—Å–∫–∞
    if found_count == 0:
        reason = "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ –æ–±–ª–∏–≥–∞—Ü–∏–π, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏—Ö –∫—Ä–∏—Ç–µ—Ä–∏—è–º"
        if sector:
            reason += f" –≤ —Å–µ–∫—Ç–æ—Ä–µ '{sector}'"
        await message.reply_text(f"‚ùå {reason}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞.")
    else:
        await message.reply_text(f"‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω! –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {processed_count} –æ–±–ª–∏–≥–∞—Ü–∏–π, –Ω–∞–π–¥–µ–Ω–æ {found_count} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö.")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üîç <b>–ë–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–±–ª–∏–≥–∞—Ü–∏–π —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫—É–ø–æ–Ω–æ–º</b>\n\n"
        "–Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –æ–±–ª–∏–≥–∞—Ü–∏–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/random - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –æ–±–ª–∏–≥–∞—Ü–∏—é\n"
        "/search - –Ω–∞–π—Ç–∏ –æ–±–ª–∏–≥–∞—Ü–∏–∏ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º"
    )
    await update.message.reply_text(help_text, parse_mode='HTML')

async def random_bond(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        all_bonds = await get_all_bonds()
        if not all_bonds:
            await update.message.reply_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –æ–±–ª–∏–≥–∞—Ü–∏–π")
            return
            
        bond = random.choice(all_bonds)
        bond_details = await get_bond_details(bond.figi)
        
        if not bond_details:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± –æ–±–ª–∏–≥–∞—Ü–∏–∏")
            return
            
        await send_bond_details(update.message, bond_details)
        
    except Exception as e:
        error_msg = f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}"
        logger.exception(error_msg)
        await update.message.reply_text(error_msg)

async def send_bond_details(message, bond_details: dict):
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –¢–∏–Ω—å–∫–æ—Ñ—Ñ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
    tinkoff_link = f"https://www.tinkoff.ru/invest/bonds/{bond_details['ticker']}/"
    
    text = f"<b>{bond_details['name']}</b>\n\n"
    text += f"‚Ä¢ <b>–¢–∏–∫–µ—Ä</b>: <a href='{tinkoff_link}'>{bond_details['ticker']}</a>\n"
    text += f"‚Ä¢ <b>–°–µ–∫—Ç–æ—Ä</b>: {bond_details.get('sector', '–î—Ä—É–≥–∏–µ')}\n"
    text += f"‚Ä¢ <b>–ù–æ–º–∏–Ω–∞–ª</b>: {bond_details['nominal']:.2f} {bond_details['currency']}\n"
    
    if bond_details['coupon_rate_percent'] is not None:
        text += f"‚Ä¢ <b>–ö—É–ø–æ–Ω–Ω–∞—è —Å—Ç–∞–≤–∫–∞</b>: {bond_details['coupon_rate_percent']:.2f}%\n"
    
    if bond_details['coupon_payment'] is not None:
        text += f"‚Ä¢ <b>–ö—É–ø–æ–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂</b>: {bond_details['coupon_payment']:.2f} {bond_details['currency']}\n"
    
    if bond_details['coupon_quantity_per_year'] > 0:
        text += f"‚Ä¢ <b>–í—ã–ø–ª–∞—Ç –≤ –≥–æ–¥</b>: {bond_details['coupon_quantity_per_year']}\n"
    
    if bond_details['days_to_maturity'] > 0:
        years = bond_details['days_to_maturity'] // 365
        months = (bond_details['days_to_maturity'] % 365) // 30
        text += f"‚Ä¢ <b>–î–æ –ø–æ–≥–∞—à–µ–Ω–∏—è</b>: ~{years} –ª–µ—Ç {months} –º–µ—Å.\n"
    
    text += f"‚Ä¢ <b>–î–∞—Ç–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è</b>: {bond_details['maturity_date']}\n"
    
    await message.reply_text(text, parse_mode='HTML', disable_web_page_preview=True)

async def search_bonds(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å–µ–∫—Ç–æ—Ä–∞–º–∏
    keyboard = []
    for i in range(0, len(SECTORS), 3):
        row = [InlineKeyboardButton(SECTORS[j], callback_data=f"sector_{SECTORS[j]}") for j in range(i, min(i+3, len(SECTORS)))]
        keyboard.append(row)
    
    keyboard.append([InlineKeyboardButton("–õ—é–±–æ–π —Å–µ–∫—Ç–æ—Ä", callback_data="sector_any")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üîç –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∫—Ç–æ—Ä —ç–∫–æ–Ω–æ–º–∏–∫–∏:",
        reply_markup=reply_markup
    )
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Å–µ–∫—Ç–æ—Ä–∞
    return SECTOR_SELECTION

async def handle_sector_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ–∫—Ç–æ—Ä
    sector = query.data.replace("sector_", "")
    if sector == "any":
        context.user_data['sector'] = None
        sector_text = "–õ—é–±–æ–π"
    else:
        context.user_data['sector'] = sector
        sector_text = sector
    
    await query.edit_message_text(
        text=f"‚úÖ –°–µ–∫—Ç–æ—Ä: {sector_text}\n\n"
             "üìä –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∫—É–ø–æ–Ω–Ω—É—é —Å—Ç–∞–≤–∫—É –≤ % (–Ω–∞–ø—Ä–∏–º–µ—Ä: 8.5):"
    )
    return MIN_RATE

async def handle_min_rate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        min_rate = float(update.message.text)
        if min_rate <= 0 or min_rate > 30:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É –æ—Ç 0.1 –¥–æ 30%")
            return MIN_RATE
            
        context.user_data['min_rate'] = min_rate
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–ª–∏–≥–∞—Ü–∏–π
        await update.message.reply_text(
            "üî¢ –°–∫–æ–ª—å–∫–æ –æ–±–ª–∏–≥–∞—Ü–∏–π –ø–æ–∫–∞–∑–∞—Ç—å? (–º–∞–∫—Å–∏–º—É–º 10):"
        )
        return LIMIT
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 8.5)")
        return MIN_RATE

async def handle_limit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        limit = int(update.message.text)
        if limit < 1 or limit > 10:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10")
            return LIMIT
            
        context.user_data['limit'] = limit
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏
        min_rate = context.user_data.get('min_rate', 7.0)
        sector = context.user_data.get('sector')
        limit = context.user_data.get('limit', 5)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        asyncio.create_task(
            find_and_send_bonds(
                update.message, 
                min_rate=min_rate, 
                sector=sector, 
                limit=limit
            )
        )
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥
        return ConversationHandler.END
            
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10")
        return LIMIT
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ–±–ª–∏–≥–∞—Ü–∏–π: {str(e)}", exc_info=True)
        await update.message.reply_text(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}")
        return ConversationHandler.END

async def cancel_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω")
    return ConversationHandler.END

def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("random", random_bond))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ConversationHandler
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("search", search_bonds)],
        states={
            SECTOR_SELECTION: [
                CallbackQueryHandler(handle_sector_selection, pattern="^sector_")
            ],
            MIN_RATE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_min_rate)
            ],
            LIMIT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_limit)
            ]
        },
        fallbacks=[CommandHandler("cancel", cancel_search)],
    )
    
    app.add_handler(conv_handler)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    app.run_polling()

if __name__ == '__main__':
    main()